//Файл Point_6.hpp: определение класса Point

#ifndef POINT_H
#define POINT_H

#include <iostream>
#include "Shape.hpp"		//** 6 ** наследование и override

class Point : public Shape	//заголовок описания класса Point
{ 							//начало закрытой (по умолчанию) части класса
	private: 				//спецификатор закрытой части (секции) класса
		double x_, y_; 		//члены-данные (свойства) класса (подчеркивание в
							//конце – это современные рекомендации экспертов)
	public: 				//спецификатор открытой части - интерфейса класса

	//** 1 ** минимальный интерфейс класса
	//объявленные ниже методы доступа (методы-аксессоры)
	// Get...() и Set...() образуют минимальный интерфейс класса
	
		double GetX() const		//член-функция (метод) для чтения компонента х_
		{ 					//определение метода в классе неявно объявляет его
			return x_; 		// встроенным (inline) (лучше этого избегать)
		}
		double GetY() const;//это прототип метода, а его определение находится
							//здесь же, но после описания класса (так лучше)
		void SetX(double); 	//метод для установки значения компонента х_,
							//определение его и всех остальных методов
		void SetY(double); 	//размещается в файле реализации Point_3.cpp
		
	//** 2.1 ** методы, расширяющие функциональность класса
		void Print(std::ostream& os = std::cout) const override;					//печать координат точки
																					//в формате (x,y)
		bool Read(std::istream& is = std::cin, const char *txt = nullptr) override;	//ввод с клавиатуры
																					//(с подсказкой)
		void Move(double delta_x, double delta_y) override; 						//относительное перемещение
																					//(от текущей позиции)
		double Dist(const Point&) const;											//расстояние между точками
																					//(имеет один аргумент!)
	
	//** 2.2 ** внешняя функция, объявленная дружественной к классу
		friend double fdist(const Point&, const Point&); //расстояние
		
	//** 3.1 ** конструкторы и деструктор (специальные методы) класса
		Point(); 						//конструктор по умолчанию
		/*explicit*/ Point(double); 	//конструктор преобразования
		Point(double, double); 			//явный конструктор
		Point(const Point&); 			//конструктор копирования
		~Point(); 						//деструктор класса
	
	//** 3.2 ** оператор присваивания
		Point& operator =(const Point&);
};

//** 5 ** операторы ввода-вывода
std::ostream& operator <<(std::ostream& os, const Point& point);
std::istream& operator >>(std::istream& is, Point& point);

//Определение встроенной функции должно быть видимым компилятору в точке
//ее вызова, по этой причине оно расположено в заголовочном файле.
//Имена функций-членов, определяемых вне контекста класса, должны быть
//полностью квалифицированы (уточнены) при помощи бинарного оператора ::
inline double Point::GetY() const //здесь inline надо объявлять явно
{
	return y_;
}
#endif	
